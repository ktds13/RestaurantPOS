// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantPOS;

#nullable disable

namespace RestaurantPOS.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    [Migration("20230926071616_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RestaurantPOS.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "C1",
                            Name = "Main Course"
                        },
                        new
                        {
                            CategoryId = "C2",
                            Name = "Appetizer"
                        },
                        new
                        {
                            CategoryId = "C3",
                            Name = "Drink"
                        },
                        new
                        {
                            CategoryId = "C4",
                            Name = "Dessert"
                        });
                });

            modelBuilder.Entity("RestaurantPOS.Models.MenuItem", b =>
                {
                    b.Property<string>("MenuItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("MenuItemID");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            MenuItemID = "M1",
                            CategoryId = "C1",
                            Description = "Classic hamburger",
                            IsAvailable = true,
                            Name = "Hamburger",
                            Price = 2000.0
                        },
                        new
                        {
                            MenuItemID = "M2",
                            CategoryId = "C2",
                            Description = "Fresh Caesar salad",
                            IsAvailable = true,
                            Name = "Caesar",
                            Price = 3000.0
                        },
                        new
                        {
                            MenuItemID = "M3",
                            CategoryId = "C3",
                            Description = "Classic code",
                            IsAvailable = true,
                            Name = "CocaCola",
                            Price = 850.0
                        },
                        new
                        {
                            MenuItemID = "M4",
                            CategoryId = "C2",
                            Description = "Cripy Fried Chicken",
                            IsAvailable = true,
                            Name = "Fried Chicken",
                            Price = 2700.0
                        },
                        new
                        {
                            MenuItemID = "M5",
                            CategoryId = "C2",
                            Description = "Classic pizza",
                            IsAvailable = false,
                            Name = "Pizza",
                            Price = 12000.0
                        });
                });

            modelBuilder.Entity("RestaurantPOS.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = "O1",
                            OrderDateTime = new DateTime(2023, 9, 26, 13, 46, 16, 203, DateTimeKind.Local).AddTicks(8548),
                            Status = 0,
                            TableId = "T4",
                            TotalAmount = 5000.0,
                            UserId = "U1"
                        },
                        new
                        {
                            OrderId = "O2",
                            OrderDateTime = new DateTime(2023, 9, 26, 13, 46, 16, 203, DateTimeKind.Local).AddTicks(8559),
                            Status = 1,
                            TableId = "T3",
                            TotalAmount = 4500.0,
                            UserId = "U3"
                        },
                        new
                        {
                            OrderId = "O3",
                            OrderDateTime = new DateTime(2023, 9, 26, 13, 46, 16, 203, DateTimeKind.Local).AddTicks(8561),
                            Status = 1,
                            TableId = "T1",
                            TotalAmount = 5000.0,
                            UserId = "U2"
                        },
                        new
                        {
                            OrderId = "O4",
                            OrderDateTime = new DateTime(2023, 9, 26, 13, 46, 16, 203, DateTimeKind.Local).AddTicks(8562),
                            Status = 1,
                            TableId = "T4",
                            TotalAmount = 5000.0,
                            UserId = "U1"
                        },
                        new
                        {
                            OrderId = "O5",
                            OrderDateTime = new DateTime(2023, 9, 26, 13, 46, 16, 203, DateTimeKind.Local).AddTicks(8564),
                            Status = 1,
                            TableId = "T2",
                            TotalAmount = 5000.0,
                            UserId = "U4"
                        });
                });

            modelBuilder.Entity("RestaurantPOS.Models.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ItemPrice")
                        .HasColumnType("float");

                    b.Property<string>("MenuItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = "OI1",
                            ItemPrice = 2000.0,
                            MenuItemId = "M1",
                            OrderId = "O1",
                            Quantity = 1,
                            SpecialRequests = ""
                        },
                        new
                        {
                            OrderItemId = "OI2",
                            ItemPrice = 3000.0,
                            MenuItemId = "M2",
                            OrderId = "O1",
                            Quantity = 1,
                            SpecialRequests = ""
                        });
                });

            modelBuilder.Entity("RestaurantPOS.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PaymentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = "P1",
                            AmountPaid = 5000.0,
                            OrderId = "O1",
                            PaymentDateTime = new DateTime(2023, 9, 26, 13, 46, 16, 203, DateTimeKind.Local).AddTicks(8646),
                            PaymentMethod = 0
                        },
                        new
                        {
                            PaymentId = "P2",
                            AmountPaid = 20000.0,
                            OrderId = "O2",
                            PaymentDateTime = new DateTime(2023, 9, 26, 13, 46, 16, 203, DateTimeKind.Local).AddTicks(8649),
                            PaymentMethod = 1
                        });
                });

            modelBuilder.Entity("RestaurantPOS.Models.Table", b =>
                {
                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = "T1",
                            Capacity = 4,
                            Status = 0,
                            TableName = "Table 1"
                        },
                        new
                        {
                            TableId = "T2",
                            Capacity = 4,
                            Status = 2,
                            TableName = "Table 2"
                        },
                        new
                        {
                            TableId = "T3",
                            Capacity = 6,
                            Status = 2,
                            TableName = "Table 3"
                        },
                        new
                        {
                            TableId = "T4",
                            Capacity = 4,
                            Status = 1,
                            TableName = "Table 4"
                        },
                        new
                        {
                            TableId = "T5",
                            Capacity = 2,
                            Status = 0,
                            TableName = "Table 5"
                        });
                });

            modelBuilder.Entity("RestaurantPOS.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "U1",
                            Password = "su123",
                            Role = 0,
                            UserName = "David"
                        },
                        new
                        {
                            UserId = "U2",
                            Password = "mike234",
                            Role = 3,
                            UserName = "Mike"
                        },
                        new
                        {
                            UserId = "U3",
                            Password = "bob456",
                            Role = 2,
                            UserName = "Bob"
                        },
                        new
                        {
                            UserId = "U4",
                            Password = "susan678",
                            Role = 1,
                            UserName = "Susan"
                        });
                });

            modelBuilder.Entity("RestaurantPOS.Models.MenuItem", b =>
                {
                    b.HasOne("RestaurantPOS.Models.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestaurantPOS.Models.Order", b =>
                {
                    b.HasOne("RestaurantPOS.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.HasOne("RestaurantPOS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantPOS.Models.OrderItem", b =>
                {
                    b.HasOne("RestaurantPOS.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantPOS.Models.Payment", b =>
                {
                    b.HasOne("RestaurantPOS.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantPOS.Models.Category", b =>
                {
                    b.Navigation("MenuItems");
                });
#pragma warning restore 612, 618
        }
    }
}
